(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["TraitsQ"]
PackageExport["InteractionsQ"]
PackageExport["AttributesQ"]
PackageExport["VariablesQ"]
PackageExport["AttributesAndVariablesQ"]
PackageExport["ListOfVariablesQ"]
PackageExport["AttributesVariablesAndGsQ"]
PackageExport["AttributesAndGsQ"]
PackageExport["ParametersQ"]
PackageExport["GsQ"]
PackageExport["InvaderQ"]
PackageExport["NotInvaderTraitsQ"]


TraitsQ::usage=
"TraitsQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of traits.";

InteractionsQ::usage=
"InteractionsQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of interactions.";

AttributesQ::usage=
"AttributesQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of traits and/or interactions.";

VariablesQ::usage=
"VariablesQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of variables.";

ListOfVariablesQ::usage=
"ListOfVariablesQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a list of rulelists of variables.";

AttributesAndVariablesQ::usage=
"AttributesAndVariablesQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of attributes (traits or interactions) and variables (auxs, pops, guilds).";

AttributesVariablesAndGsQ::usage=
"AttributesAndVariablesQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of attributes (traits or interactions), variables (auxs, pops, guilds), and trait variance/covariances.";

AttributesAndGsQ::usage=
"AttributesAndGsQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of attributes (traits or interactions), and trait variance/covariances.";


TraitsQ[list_]:=VectorQ[list,(#[[0]]===Rule||#[[0]]===RuleDelayed)&&(First@LookUp[#[[1]]]==="gtrait"||#[[1,0]]===\[ScriptCapitalN]||#[[1,0]]===\[FormalCapitalN])&]


InteractionsQ[list_]:=VectorQ[list,(#[[0]]===Rule||#[[0]]===RuleDelayed)&&(First@LookUp[#[[1]]]==="interaction"||#[[1,0]]===\[ScriptCapitalN]||#[[1,0]]===\[FormalCapitalN])&]


AttributesQ[list_]:=VectorQ[list,(#[[0]]===Rule||#[[0]]===RuleDelayed)&&(First@LookUp[#[[1]]]==="gtrait"||First@LookUp[#[[1]]]==="interaction"||#[[1,0]]===\[ScriptCapitalN]||#[[1,0]]===\[FormalCapitalN])&]


VariablesQ[list_]:=list==="FindEcoAttractor"||VectorQ[list,(#[[0]]===Rule||#[[0]]===RuleDelayed)&&(MemberQ[{"pcomp","gcomp","aux"},First@LookUp[#[[1]]]]
||#[[1,0]]===\[ScriptCapitalN]||#[[1,0]]===\[FormalCapitalN]||#[[1]]===Parameter)&]


AttributesAndVariablesQ[list_]:=
If[RuleListQ[list]&&
	FixAttributes[Union[ExtractTraits[list],ExtractInteractions[list]]]=!=list&&
	FixVariables[ExtractVariables[list]]=!=list,
	True,False,False]


ListOfVariablesQ[x_]:=If[x==={},False,VectorQ[x,VariablesQ[#]&]];


AttributesVariablesAndGsQ[list_]:=
If[RuleListQ[list]&&
	FixAttributes[Union[ExtractTraits[list],ExtractInteractions[list]]]=!=list&&
	FixAttributes[Union[ExtractTraits[list],ExtractInteractions[list]]]=!={}&&
	FixVariables[ExtractVariables[list]]=!=list&&
	FixVariables[ExtractVariables[list]]=!={}&&
	ExtractVarCovs[list]=!=list&&
	ExtractVarCovs[list]=!={},
	True,False,False]


AttributesAndGsQ[list_]:=
If[RuleListQ[list]&&
	FixAttributes[Union[ExtractTraits[list],ExtractInteractions[list]]]=!=list&&
	FixAttributes[Union[ExtractTraits[list],ExtractInteractions[list]]]=!={}&&
	ExtractVariables[list]==={}&&
	ExtractVarCovs[list]=!=list&&
	ExtractVarCovs[list]=!={},
	True,False,False]


ParametersQ::usage="ParametersQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of parameters.";


ParametersQ[list_]:=VectorQ[list,(#[[0]]===Rule||#[[0]]===RuleDelayed)&&(MemberQ[EcoEvo`Private`parnames,ToString[#[[1]]]])&]


GsQ::usage=
"GsQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a list of G matrices or V variances.";


GsQ[list_]:=Quiet[
	VectorQ[list,(#[[0]]===Rule||#[[0]]===RuleDelayed)&&(
		MemberQ[{G,V},#[[1,0]]]||MemberQ[{G,V},#[[1,1,0]]]||
		MemberQ[{Var,Cov},#[[1,1,0,0]]]||MemberQ[{Var,Cov},#[[1,1,0]]]||MemberQ[{Var,Cov},#[[1,0]]])||
		#[[1,0]]===\[ScriptCapitalN]||#[[1,0]]===\[FormalCapitalN]&]
	,{Part::partd}
];


InvaderQ::usage=
"InvaderQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a possible invader.";

NotInvaderTraitsQ::usage=
"NotInvaderTraitsQ[\!\(\*
StyleBox[\"x\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"x\", \"TI\"]\) is a rulelist of traits with no invaders.";


InvaderQ[x_]:=If[
	x===Automatic ||
	MemberQ[Join[Flatten[Table[pcomps[pop],{pop,pops}]],pops],x]||
	(LookUp[x][[1]]==="gcomp"||LookUp[x][[1]]==="guild")||
	(x[[0]]===Rule&&Length[LookUp[x[[1]]]]>=4&&LookUp[x[[1]]][[{1,4}]]==={"gtrait",0})||
	VectorQ[x,#[[0]]===Rule&&Length[LookUp[#[[1]]]]>=4&&LookUp[#[[1]]][[{1,4}]]==={"gtrait",0}&]||
	(x[[0]]===Rule&&Length[LookUp[x[[1]]]]>=5&&LookUp[x[[1]]][[{1,5}]]==={"interaction",0})||
	VectorQ[x,#[[0]]===Rule&&Length[LookUp[#[[1]]]]>=5&&LookUp[#[[1]]][[{1,5}]]==={"interaction",0}&],
	True,False];


NotInvaderTraitsQ[list_]:=VectorQ[list,
	(#[[0]]===Rule||#[[0]]===RuleDelayed)&&
	((LookUp[#[[1]]][[1]]==="gtrait"&&LookUp[#[[1]]][[4]]=!=0)||
	(LookUp[#[[1]]][[1]]==="interaction"&&(Length[LookUp[#[[1]]]]==4||LookUp[#[[1]]][[5]]=!=0))||
	#[[1,0]]===\[ScriptCapitalN]||#[[1,0]]===\[FormalCapitalN])
&];
