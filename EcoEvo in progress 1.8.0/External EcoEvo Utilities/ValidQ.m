(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["ValidQ"]


ValidQ::usage="ValidQ[\!\(\*
StyleBox[\"sol\", \"TI\"]\)] returns True if \!\(\*
StyleBox[\"sol\", \"TI\"]\) is within the allowed range of variables.";


ValidQ[eq_?RuleListQ,opts___?OptionQ]:=Module[{
(* options *)
verbose,simplifyresult,simplifyopts,
(* other variables *)
res},

If[modelloaded!=True,Message[EcoEvoGeneral::nomodel];Return[$Failed]];

Block[{verbosity},

(* set verbosity *)

verbose=Evaluate[Verbose/.Flatten[{opts,Options[EcoStableQ]}]];
If[verbose,
	verbosity=Max[1,Evaluate[Verbosity/.Flatten[{opts,Options[ValidQ]}]]],
	verbosity=Evaluate[Verbosity/.Flatten[{opts,Options[ValidQ]}]]
];
If[IntegerQ[Global`$verbosity],verbosity=Max[Global`$verbosity,verbosity]];

(* handle options *)

simplifyresult=Evaluate[SimplifyResult/.Flatten[{opts,Options[ValidQ]}]];
simplifyopts=Evaluate[SimplifyOpts/.Flatten[{opts,Options[ValidQ]}]];

(*Print["simplifyresult=",simplifyresult];
Print["simplifyopts=",simplifyopts];*)

res=CompoundAnd[Flatten@Table[
	Which[
		Head[el[[2]]]===TemporalData,
		Map[IntervalMemberQ[range[el[[1]]],#]&,Normal[el[[2]]][[All,2]]],
		Else,
		If[Im[el[[2]]]==0&&Min[range[el[[1]]]]<=el[[2]]<=Max[range[el[[1]]]],True,False]
	]
,{el,eq}]];

VPrint[3,"res",res];

Which[
	simplifyresult===True,
	CheckAssumptions;
	Return[Simplify[res,Evaluate[Sequence@@simplifyopts]]],
	simplifyresult===Full,
	CheckAssumptions;
	Return[FullSimplify[res,Evaluate[Sequence@@simplifyopts]]],
	simplifyresult===Real,
	CheckAssumptions;
	Return[RealSimplify[res,Evaluate[Sequence@@simplifyopts]]],
	Else,
	Return[res]
];

]];


(* make listable across variables *)
ValidQ[eqs_?ListOfVariablesQ,opts___?OptionQ]:=(ValidQ[#,opts]&/@eqs);


Options[ValidQ]={Verbose->False,Verbosity->0,
SimplifyResult->Real,SimplifyOpts->{Assumptions:>DeleteCases[$Assumptions,False]}};



