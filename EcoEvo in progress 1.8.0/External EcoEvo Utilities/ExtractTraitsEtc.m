(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["ExtractTraits"]
PackageExport["ExtractInteractions"]
PackageExport["ExtractAttributes"]
PackageExport["ExtractAuxs"]
PackageExport["ExtractPops"]
PackageExport["ExtractGuilds"]
PackageExport["ExtractVariables"]
PackageExport["ExtractSpecies"]
PackageExport["ExtractVarCovs"]
PackageExport["ExtractParameters"]


ExtractInteractions::usage=
"ExtractInteractions[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts interactions from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";

ExtractTraits::usage=
"ExtractTraits[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts traits from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).
ExtractTraits[\!\(\*
StyleBox[\"x\", \"TI\"]\), \!\(\*
StyleBox[\"target\", \"TI\"]\)] extracts only traits from guild or species \!\(\*
StyleBox[\"target\", \"TI\"]\).";

ExtractAttributes::usage=
"ExtractAttributes[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts traits and interactions from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";

ExtractGuilds::usage=
"ExtractGuilds[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts guilds from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).
ExtractGuilds[\!\(\*
StyleBox[\"x\", \"TI\"]\), \!\(\*
StyleBox[\"target\", \"TI\"]\)] extracts only guilds from guild or species \!\(\*
StyleBox[\"target\", \"TI\"]\).";

ExtractPops::usage=
"ExtractPops[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts pops from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";

ExtractAuxs::usage=
"ExtractAuxs[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts auxs from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";

ExtractVariables::usage=
"ExtractVariables[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts pops, guilds, and auxs from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";

ExtractSpecies::usage=
"ExtractSpecies[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts pops and guilds from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";

ExtractVarCovs::usage=
"ExtractVarCovs[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts trait variances and covariances from rulelist or list-of-rulelists \!\(\*
StyleBox[\"x\", \"TI\"]\).";


ExtractInteractions[in_(*?RuleListQ*)]:=Module[{pattern},
	pattern=Join[
		interactions,
		Table[Subscript[interaction, _,_],{interaction,interactions}],
		Table[Subscript[\[ScriptCapitalN], gu],{gu,guilds}],
		Table[Subscript[\[FormalCapitalN], gu],{gu,guilds}]
	];
	Return[MyFilterRules[in,pattern]]
];


ExtractTraits[in_(*?RuleListQ*),target_:All]:=Module[{res,pattern,gu,sp},
	Which[
		target===All,
		pattern=Join[
			Flatten[Table[Table[Subscript[gtrait, _],{gtrait,gtraits[gu]}],{gu,guilds}]],
			Flatten[Table[Table[Table[Subscript[gtrait[gcomp], _],{gcomp,gcomps[gu]}],{gtrait,gtraits[gu]}],{gu,guilds}]],
			Table[Subscript[\[ScriptCapitalN], gu],{gu,guilds}],
			Table[Subscript[\[FormalCapitalN], gu],{gu,guilds}]
		],
		Head[target]===Subscript,
		gu=target[[1]];sp=target[[2]];
		pattern=Table[Subscript[gtrait, sp],{gtrait,gtraits[gu]}],
		Else,
		gu=target;
		pattern=Join[
			Table[Subscript[gtrait, _],{gtrait,gtraits[gu]}],
			Flatten[Table[Table[Subscript[gtrait[gcomp], _],{gcomp,gcomps[gu]}],{gtrait,gtraits[gu]}]],
			{Subscript[\[ScriptCapitalN], gu],Subscript[\[FormalCapitalN], gu]}]
	];
	(*Print["pattern=",pattern];*)
	res=MyFilterRules[in,pattern];
	Return[res]
];


ExtractAttributes[in_(*?RuleListQ*)]:=Union[ExtractTraits[in],ExtractInteractions[in]];


ExtractGuilds[in_(*?RuleListQ*),target_:All]:=Module[{res,pattern,gu,sp},
	Which[
		target===All,
		pattern=Join[
			Flatten[Table[Table[{Subscript[gcomp, _],Subscript[gcomp, _][_]},{gcomp,gcomps[gu]}],{gu,guilds}]],
			Table[Subscript[\[ScriptCapitalN], gu],{gu,guilds}],
			Table[Subscript[\[FormalCapitalN], gu],{gu,guilds}],
			Table[Subscript[gu, _],{gu,guilds}]
		],
		Head[target]===Subscript,
		gu=target[[1]];sp=target[[2]];
		pattern=Join[Flatten[Table[{Subscript[gcomp, sp],Subscript[gcomp, sp][_]},{gcomp,gcomps[gu]}]],{Subscript[gu, sp]}],
		Else,
		gu=target;
		pattern=Join[Flatten[Table[{Subscript[gcomp, _],Subscript[gcomp, _][_]},{gcomp,gcomps[gu]}]],{Subscript[gu, _],Subscript[\[ScriptCapitalN], gu]}]
	];
	(*Print["pattern=",pattern];*)
	res=MyFilterRules[in,pattern];
	Return[res]
];


ExtractAuxs[in_(*?RuleListQ*)]:=MyFilterRules[in,
Flatten[Table[{aux,aux[_]},{aux,auxs}]]];


ExtractPops[in_(*?RuleListQ*)]:=MyFilterRules[in,
Flatten[Table[Table[{pcomp,pcomp[_]},{pcomp,pcomps[pop]}],{pop,pops}]]
];


ExtractVariables[in_(*?RuleListQ*)]:=Union[ExtractAuxs[in],ExtractPops[in],ExtractGuilds[in]];


ExtractSpecies[in_(*?RuleListQ*)]:=Union[ExtractPops[in],ExtractGuilds[in]];


ExtractVarCovs[in_(*?RuleListQ*),target_:All]:=Module[{res,pattern,gu,sp},
	Which[
		target===All,
		pattern=Join[
			Flatten[Table[Table[
				{Var[gtrait],Subscript[Var[gtrait], _],
				Table[{Var[gtrait][gcomp],Subscript[Var[gtrait][gcomp], _]},{gcomp,gcomps[gu]}],
				Table[
					{Cov[gtrait,gtrait\[Prime]],Subscript[Cov[gtrait,gtrait\[Prime]], _],
					Table[{Cov[gtrait,gtrait\[Prime]][gcomp],Subscript[Cov[gtrait,gtrait\[Prime]][gcomp], _]},{gcomp,gcomps[gu]}]}
				,{gtrait\[Prime],gtraits[gu]}]}
				,{gtrait,gtraits[gu]}],{gu,guilds}]],
			Table[Subscript[\[ScriptCapitalN], gu],{gu,guilds}],
			Table[Subscript[\[FormalCapitalN], gu],{gu,guilds}]
		]
	];
	(*Print["pattern=",pattern];*)
	res=MyFilterRules[in,pattern];
	Return[res]
];


(* make Listable *)
(*ExtractTraits[in_?RuleListListQ,target___]:=ExtractTraits[#,target]&/@in;
ExtractTraits[in_?RuleListQ,target_List]:=Flatten[Union[ExtractTraits[in,#]&/@target]];
ExtractInteractions[in_?RuleListListQ]:=ExtractInteractions/@in;
ExtractAttributes[in_?RuleListListQ]:=ExtractAttributes/@in;
ExtractGuilds[in_?RuleListListQ,target___]:=ExtractGuilds[#,target]&/@in;
ExtractGuilds[in_?RuleListQ,target_List]:=Flatten[Union[ExtractGuilds[in,#]&/@target]];
ExtractAuxs[in_?RuleListListQ]:=ExtractAuxs/@in;
ExtractPops[in_?RuleListListQ]:=ExtractPops/@in;
ExtractVariables[in_?RuleListListQ]:=ExtractVariables/@in;
ExtractSpecies[in_?RuleListListQ]:=ExtractSpecies/@in;*)


ExtractParameters::usage="ExtractParameters[\!\(\*
StyleBox[\"x\", \"TI\"]\)] extracts parameters from rulelist \!\(\*
StyleBox[\"x\", \"TI\"]\).";


ExtractParameters[in_(*?RuleListQ*)]:=MyFilterRules[in,parnames];
