(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["MinimumValue"]
PackageExport["MaximumValue"]


MinimumValue::usage=
"MinimumValue[\!\(\*
StyleBox[\"f\", \"TI\"]\)] finds the global minimum value of temporal rule list \!\(\*
StyleBox[\"f\", \"TI\"]\).
MinimumValue[\!\(\*
StyleBox[\"f\", \"TI\"]\), {\!\(\*
StyleBox[\"tmin\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)}] looks between \!\(\*
StyleBox[\"tmin\", \"TI\"]\) and \!\(\*
StyleBox[\"tmax\", \"TI\"]\).
MinimumValue[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] threads over \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).";


MinimumValue[x:(_InterpolatingFunction|_TemporalData)]:=Sort[MapValues[Min,(FindMinima[x][[All,2]])]];
MinimumValue[x:(_InterpolatingFunction|_TemporalData),{tmin_?NumericQ,tmax_?NumericQ}]:=
	Sort[MapValues[Min,(FindMinima[x,{tmin,tmax}][[All,2]])]];


(* thread over RuleLists *)
MinimumValue[f_?TemporalRuleListQ]:=Sort[MapValues[Min,MinimumValues[f]]];
MinimumValue[f_?TemporalRuleListQ,{tmin_?NumericQ,tmax_?NumericQ}]:=Sort[MapValues[Min,MinimumValues[f,{tmin,tmax}]]];


(* thread over ParametricDynamicss *)
MinimumValue[pd_ParametricDynamics,opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[MinimumValue/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[MinimumValue/@pd[[1]]]
];

MinimumValue[pd_ParametricDynamics,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[MinimumValue/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[MinimumValue[#,{tmin,tmax}]&/@pd[[1]]]
];


MaximumValue::usage=
"MaximumValue[\!\(\*
StyleBox[\"f\", \"TI\"]\)] finds the global maximum value of temporal rule list \!\(\*
StyleBox[\"f\", \"TI\"]\).
MaximumValue[\!\(\*
StyleBox[\"f\", \"TI\"]\), {\!\(\*
StyleBox[\"tmin\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)}] looks between \!\(\*
StyleBox[\"tmin\", \"TI\"]\) and \!\(\*
StyleBox[\"tmax\", \"TI\"]\).
MaximumValue[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] threads over \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).";


MaximumValue[x:(_InterpolatingFunction|_TemporalData)]:=Sort[MapValues[Max,(FindMaxima[x][[All,2]])]];
MaximumValue[x:(_InterpolatingFunction|_TemporalData),{tmin_?NumericQ,tmax_?NumericQ}]:=
	Sort[MapValues[Max,(FindMaxima[x,{tmin,tmax}][[All,2]])]];


(* thread over RuleLists *)
MaximumValue[f_?TemporalRuleListQ]:=Sort[MapValues[Max,MaximumValues[f]]];
MaximumValue[f_?TemporalRuleListQ,{tmin_?NumericQ,tmax_?NumericQ}]:=Sort[MapValues[Max,MaximumValues[f,{tmin,tmax}]]];


(* thread over ParametricDynamicss *)
MaximumValue[pd_ParametricDynamics,opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[MaximumValue/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[MaximumValue/@pd[[1]]]
];

MaximumValue[pd_ParametricDynamics,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[MaximumValue/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[MaximumValue[#,{tmin,tmax}]&/@pd[[1]]]
];



