(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["Slice"]
PackageExport["InitialSlice"]
PackageExport["FinalSlice"]


Slice::usage=
"Slice[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\), \!\(\*
StyleBox[\"t\", \"TI\"]\)] replaces temporal \!\(\*
StyleBox[\"rulelist\", \"TI\"]\) with its values at \!\(\*
StyleBox[\"t\", \"TI\"]\).
Slice[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\), {\!\(\*
StyleBox[\"tmin\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)}] extracts values from \!\(\*
StyleBox[\"tmin\", \"TI\"]\) to \!\(\*
StyleBox[\"tmax\", \"TI\"]\).";


Slice[prl_?ParametricRuleListQ,parval:(_?NumericQ|_DirectedInfinity)]:=Module[{parname,slice,initialpar},
	slice=Slice[prl/.if_InterpolatingFunction[par_]->if,parval];
	parname=prl[[1]]/.(var_->if_InterpolatingFunction[par_])->par;
	(*Return[Join[slice,{parname->parval}]]*)
	Return[slice]
]


Slice[sol_?(*Temporal*)RuleListQ,t:(_?NumericQ|_DirectedInfinity)]:=
Which[
	MemberQ[{InterpolatingFunction,TemporalData},Head[#[[2]]]],
	(*ReplacePart[#,2\[Rule](#\[LeftDoubleBracket]1\[RightDoubleBracket][t]/.#)]*)
	ReplacePart[#,2->(#[[1]]/.#)[t]]
,
	Head[#[[2]]]===List,
	ReplacePart[#,2->Select[sol[[1,2]],#[[1]]==t&,1][[1,2]]]
,
	Else,#
]&/@sol;

Slice[sol_?(*Temporal*)RuleListQ,{t1_?NumericQ,t2_?NumericQ}]:=
Which[
	Head[#[[2]]]===InterpolatingFunction,
	ReplacePart[#,2->InterpolatingFunctionTake[#[[2]],{t1,t2}]]
,
	Head[#[[2]]]===List,
	ReplacePart[#,2->Select[sol[[1,2]],t1<=#[[1]]<=t2&]]
,
	Head[#[[2]]]===TemporalData,
	ReplacePart[#,2->TimeSeries[Transpose[{#[[2]]["Times"][[t1+1;;t2+1]],#[[2]]["Values"][[t1+1;;t2+1]]}]]]
,
	Else,#
]&/@sol

Slice[sol_?RuleListQ,___]:=sol;


InitialSlice::usage=
"InitialSlice[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] extracts the initial values from temporal \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).
InitialSlice[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)] extracts the initial values ending at \!\(\*
StyleBox[\"tmax\", \"TI\"]\).";


InitialSlice[prl_?ParametricRuleListQ]:=Module[{parname,slice,initialpar},
	slice=InitialSlice[prl/.if_InterpolatingFunction[par_]->if];
	(*parname=prl[[1]]/.(var_->if_InterpolatingFunction[par_])->par;
	initialpar=InitialParameter[prl];
	Return[Join[slice,{parname->initialpar}]]*)
	Return[slice]
]


InitialSlice[sol_?RuleListQ,n:(_?NumericQ):0]:=Module[{x},
	x=If[modeltype=="ContinuousTime",10.^-100,0];
	If[n==0,
		Return[Slice[sol,InitialTime[sol]+x]],
		Return[Slice[sol,{InitialTime[sol]x,InitialTime[sol]+n}]]
	]
];


(*InitialSlice[sol_?RuleListQ,___]:=sol;*)


FinalSlice::usage=
"FinalSlice[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] extracts the final values from temporal \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).
FinalSlice[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\), \!\(\*
StyleBox[\"tmin\", \"TI\"]\)] extracts the final values starting at \!\(\*
StyleBox[\"tmin\", \"TI\"]\).";


FinalSlice[prl_?ParametricRuleListQ]:=Module[{parname,slice,finalpar},
	slice=FinalSlice[prl/.if_InterpolatingFunction[par_]->if];
	(*parname=prl[[1]]/.(var_->if_InterpolatingFunction[par_])->par;
	finalpar=FinalParameter[prl];
	Return[Join[slice,{parname->finalpar}]]*)
	Return[slice]
]


FinalSlice[sol_?RuleListQ,n:(_?NumericQ):0]:=
	If[n==0,
		Return[Slice[sol,FinalTime[sol]]],
		Return[Slice[sol,{FinalTime[sol]-n,FinalTime[sol]}]]
	];


(*FinalSlice[sol_?RuleListQ,___]:=sol;*)
