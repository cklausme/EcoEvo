(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["TemporalCovariance"]


TemporalCovariance::usage=
"TemporalCovariance[\!\(\*
StyleBox[\"f1\", \"TI\"]\), \!\(\*
StyleBox[\"f2\", \"TI\"]\), \!\(\*
StyleBox[\"var\", \"TI\"]\)] gives the covariance of \!\(\*
StyleBox[\"f1\", \"TI\"]\) and \!\(\*
StyleBox[\"f2\", \"TI\"]\) with respect to \!\(\*
StyleBox[\"var\", \"TI\"]\)\!\(\*
StyleBox[\" \", \"TI\"]\)(default \!\(\*
StyleBox[\"var\", \"TI\"]\)=\!\(\*
StyleBox[\"t\", \"TI\"]\)).
TemporalCovariance[\!\(\*
StyleBox[\"f1\", \"TI\"]\), \!\(\*
StyleBox[\"f2\", \"TI\"]\), {\!\(\*
StyleBox[\"var\", \"TI\"]\), \!\(\*
StyleBox[\"varmin\", \"TI\"]\), \!\(\*
StyleBox[\"varmax\", \"TI\"]\)}] ranges from \!\(\*
StyleBox[\"varmin\", \"TI\"]\) to \!\(\*
StyleBox[\"varmax\", \"TI\"]\).
TemporalCovariance[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] threads over \!\(\*
StyleBox[\"rulelist\", \"TI\"]\) to give variances and covariances.";


(* main *)
TemporalCovariance[f1_,f2_,{var_Symbol,varmin_?NumericQ,varmax_?NumericQ},opts___?OptionQ]:=Module[{integrateopts,nintegrateopts,avgopts,method,avg1,avg2},
	method=Evaluate[Method/.Flatten[{opts,Options[TemporalCovariance]}]];
	If[(InterpolatingFunctionFunctionQ[f1]==True)||(InterpolatingFunctionFunctionQ[f2]==True),method="NIntegrate"];
	If[(TemporalDataFunctionQ[f1]==True)||(TemporalDataFunctionQ[f2]==True),method="Sum"];
	integrateopts=Evaluate[IntegrateOpts/.Flatten[{opts,Options[TemporalCovariance]}]];
	nintegrateopts=Evaluate[NIntegrateOpts/.Flatten[{opts,Options[TemporalCovariance]}]];
	avgopts=Evaluate[TemporalMeanOpts/.Flatten[{opts,Options[TemporalCovariance]}]];
	
	avg1=TemporalMean[f1,{var,varmin,varmax},Method->method];
	avg2=TemporalMean[f2,{var,varmin,varmax},Method->method];
	
	Which[
		method=="Integrate",
		Return[Integrate[(f1-avg1)(f2-avg2),{var,varmin,varmax},Evaluate[Sequence@@integrateopts]]/(varmax-varmin)],
		method=="NIntegrate",
		Return[NIntegrate[(f1-avg1)(f2-avg2),{var,varmin,varmax},Evaluate[Sequence@@nintegrateopts]]/(varmax-varmin)],
		method=="Sum",
		Return[Sum[(f1-avg1)(f2-avg2),{var,varmin,varmax}]/(varmax-varmin+1)],
		Else,
		Message[General::badmtd];Return[$Failed];
	];
];


(* thread over rule lists *)
TemporalCovariance[f_?RuleListQ,opts___?OptionQ]:=Module[{vars,pairs},
(*Print["threading 1"];*)
	vars=Keys[f];
	pairs=Subsets[vars,{2}];
	Return[Join[
		Table[Var[var]->TemporalVariance[var/.f,opts],{var,vars}],
		Table[Cov[Evaluate@@Sequence[pair]]->TemporalCovariance[Evaluate@@Sequence[pair/.f],opts]
	,{pair,pairs}]]]
];

TemporalCovariance[f_?RuleListQ,{var_Symbol,varmin_?NumericQ,varmax_?NumericQ},opts___?OptionQ]:=Module[{vars,pairs},
(*Print["threading 2"];*)
	vars=Keys[f];
	pairs=Subsets[vars,{2}];
	Return[Join[
		Table[Var[var]->TemporalVariance[var/.f,{var,varmin,varmax},opts],{var,vars}],
		Table[Cov[Evaluate@@Sequence[pair]]->TemporalCovariance[Evaluate@@Sequence[pair/.f],{var,varmin,varmax},opts]
	,{pair,pairs}]]]
];


(* InterpolatingFunctionFunctions *)
TemporalCovariance[if1_,if2_?InterpolatingFunctionFunctionQ,var_:t,opts___?OptionQ]:=Module[{nintegrateopts,avgopts,ifdomains,numifdomains,varmin,varmax},
	nintegrateopts=Evaluate[NIntegrateOpts/.Flatten[{opts,Options[TemporalCovariance]}]];
	avgopts=Evaluate[TemporalMeanOpts/.Flatten[{opts,Options[TemporalCovariance]}]];

	ifdomains=Map[#["Domain"][[1]]&,Cases[{if1,if2},_InterpolatingFunction,\[Infinity],Heads->True]];
	numifdomains=Length[Union[ifdomains]];
	
	Which[
		numifdomains==0,
		Message[TemporalCovariance::norange],
		numifdomains>1,
		Message[TemporalCovariance::unkrange],
		Else,
		{varmin,varmax}=ifdomains[[1]];
		Return[TemporalCovariance[if1,if2,{var,varmin,varmax},Method->"NIntegrate",NIntegrateOpts->nintegrateopts]]
	];
];

TemporalCovariance[if1_?InterpolatingFunctionFunctionQ,if2_,var_:t,opts___?OptionQ]:=TemporalCovariance[if2,if1,var,opts];


(* InterpolatingFunctions *)
TemporalCovariance[f1_InterpolatingFunction,f2_InterpolatingFunction,opts___?OptionQ]:=((*Print["raw IF"];*)TemporalCovariance[f1[t],f2[t],opts]);
TemporalCovariance[f1_InterpolatingFunction,f2_InterpolatingFunction,{var_Symbol,varmin_?NumericQ,varmax_?NumericQ},opts___?OptionQ]:=
	((*Print["IF2"];*)TemporalCovariance[f1[t],f2[t],{var,varmin,varmax},opts]);


(* TemporalData *)
TemporalCovariance[f1_TemporalData,f2_TemporalData,opts___?OptionQ]:=Module[{n},
(*Print["td"];*)
	n=(f1["LastTimes"]-f1["FirstTimes"])[[1]]+1;
	Covariance[f1["Values"],f2["Values"]]*(n-1)/n
];

TemporalCovariance[f1_TemporalData,f2_TemporalData,{var_Symbol,varmin_?NumericQ,varmax_?NumericQ},opts___?OptionQ]:=Module[{n},
	n=varmax-varmin+1;
	(*Print["td2"];*)
	Covariance[TimeSeriesWindow[f1,{varmin,varmax}]["Values"],TimeSeriesWindow[f2,{varmin,varmax}]["Values"]]*(n-1)/n
];


(* TemporalDataFunctions *)
TemporalCovariance[f1_,f2_?TemporalDataFunctionQ,var_Symbol:t,opts___?OptionQ]:=Module[{domains,numdomains,varmin,varmax},
	(*Print["tdf2"];*)
	
	domains=Join[
		Map[{#["FirstTimes"][[1]],#["LastTimes"][[1]]}&,Cases[f1,_TemporalData,\[Infinity],Heads->True]],
		Map[{#["FirstTimes"][[1]],#["LastTimes"][[1]]}&,Cases[f2,_TemporalData,\[Infinity],Heads->True]]
	];
	numdomains=Length[Union[domains]];
	
	Which[
		numdomains==0,
		Message[TemporalCovariance::norange],
		numdomains>1,
		Message[TemporalCovariance::unkrange],
		Else,
		{varmin,varmax}=domains[[1]];
		Return[TemporalCovariance[f1,f2,{var,varmin,varmax},opts]]
	];
];

TemporalCovariance[f1_?TemporalDataFunctionQ,f2_,var_:t,opts___?OptionQ]:=((*Print["tdf1"];*)TemporalCovariance[f2,f1,var,opts]);


Options[TemporalCovariance]={IntegrateOpts->{},NIntegrateOpts->{},TemporalMeanOpts->{},Method->"Integrate"};
