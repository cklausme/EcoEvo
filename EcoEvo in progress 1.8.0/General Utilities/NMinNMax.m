(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["NMin"]
PackageExport["NMax"]


NMin::usage="NMin[\!\(\*
StyleBox[\"x\", \"TI\"]\), \!\(\*
StyleBox[\"y\", \"TI\"]\)] is a smooth approximation to Min[\!\(\*
StyleBox[\"x\", \"TI\"]\), \!\(\*
StyleBox[\"y\", \"TI\"]\)].";
NMax::usage="NMax[\!\(\*
StyleBox[\"x\", \"TI\"]\), \!\(\*
StyleBox[\"y\", \"TI\"]\)] is a smooth approximation to Max[\!\(\*
StyleBox[\"x\", \"TI\"]\), \!\(\*
StyleBox[\"y\", \"TI\"]\)].";


NMin[x_,y_,opts___]:=Module[{slope},
	slope=Evaluate[Slope/.Flatten[{opts,Options[NMin]}]];
	(\[Pi](x+y)-2.(x-y)ArcTan[slope(x-y)])/(2\[Pi])
];


NMax[x_,y_,opts___]:=Module[{slope},
	slope=Evaluate[Slope/.Flatten[{opts,Options[NMax]}]];
	(\[Pi](x+y)+2.(y-x)ArcTan[slope(y-x)])/(2\[Pi])
];


NMin[list_List,opts___]:=If[Length[list]==2,NMin[list[[1]],list[[2]],opts],Message[NMin::nottwo]];
NMax[list_List,opts___]:=If[Length[list]==2,NMax[list[[1]],list[[2]],opts],Message[NMax::nottwo]];


Options[NMin]={Slope->10^6};
Options[NMax]={Slope->10^6};


NMin::nottwo="NMin only works on lists of two values.";
NMax::nottwo="NMax only works on lists of two values.";
