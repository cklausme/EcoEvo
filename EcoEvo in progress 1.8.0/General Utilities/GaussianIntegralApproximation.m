(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["GaussianIntegralApproximation"]


GaussianIntegralApproximation::usage="GaussianIntegralApproximation[\!\(\*
StyleBox[\"func\", \"TI\"]\),{\!\(\*
StyleBox[\"vars\", \"TI\"]\),\!\(\*
StyleBox[\"mean\", \"TI\"]\),\!\(\*
StyleBox[\"varcov\", \"TI\"]\)}] gives a second-order approximation to the Gaussian integral with respect to \!\(\*
StyleBox[\"vars\", \"TI\"]\) of \!\(\*
StyleBox[\"func\", \"TI\"]\) multiplied by a multinormal distibution with \!\(\*
StyleBox[\"mean\", \"TI\"]\) and \!\(\*
StyleBox[\"varcov\", \"TI\"]\).";


GaussianIntegralApproximation[func_?MatrixQ,{x_List,mean_List,var_List},opts___?OptionQ]:={{GaussianIntegralApproximation[func[[1,1]],{x,mean,var},opts]}};
GaussianIntegralApproximation[func_?MatrixQ,{x_,mean_,var_},opts___?OptionQ]:={{GaussianIntegralApproximation[func[[1,1]],{{x},{mean},{{var}}},opts]}};


GaussianIntegralApproximation[func_,{x_List,mean_List,var_List}]:=(func+1/2DoubleDotProduct[HessianMatrix[func,x],var])/.x->mean;


GaussianIntegralApproximation[func_,{x_,mean_,var_},opts___?OptionQ]:=GaussianIntegralApproximation[func,{{x},{mean},{{var}}},opts];
GaussianIntegralApproximation[func_,{x_,xmean_,xvar_},{y_,ymean_,yvar_},opts___?OptionQ]:=GaussianIntegralApproximation[GaussianIntegralApproximation[func,{x,xmean,xvar},opts],{y,ymean,yvar},opts];



