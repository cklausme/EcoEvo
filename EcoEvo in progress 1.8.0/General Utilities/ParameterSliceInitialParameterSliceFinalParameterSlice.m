(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["ParameterSlice"]
PackageExport["InitialParameterSlice"]
PackageExport["FinalParameterSlice"]


ParameterSlice::usage="ParameterSlice[\!\(\*
StyleBox[\"pd\", \"TI\"]\), \!\(\*
StyleBox[\"parval\", \"TI\"]\)] returns a parameter slice of ParametricDynamics \!\(\*
StyleBox[\"pd\", \"TI\"]\) at parameter value \!\(\*
StyleBox[\"parval\", \"TI\"]\).";


ParameterSlice[pd_ParametricDynamics,parval_?NumericQ]:=Module[{vars,keys,parvals,nearest,tmax,lines,ip,s,res},
	vars=pd["Variables"];
	keys=pd["Keys"];
	parvals=pd["Coordinates"];
	If[MemberQ[keys,ToString@parval],Return[pd[[1]][ToString@parval]]]; (* no interpolation needed *)
	(* interpolation needed *)
	tmax=Period/.Slice[FinalTime[pd],parval];
(*Print["tmax=",tmax];*)
	Which[
		pd["ModelType"]=="ContinuousTime", (* based on <https://mathematica.stackexchange.com/a/147919/6358> by Michael E2 *)
		nearest=Nearest[parvals->Automatic];
(*Print["nearest=",nearest];*)
		res=Flatten@Table[
			lines=var[t]/.Values[pd[[1]]];
(*Print["lines=",lines];*)
			ip[t0_?NumericQ]:=Block[{t=t0},InterpolatingPolynomial[Transpose[{parvals[[#]],lines[[#]]}&@nearest[parval,4]],parval]];
			s=Quiet[NDSolve[{x'[t]==0,var[t]==ip[t]},var,{t,0,tmax}][[1]]]
			,{var,vars}],
		pd["ModelType"]=="DiscreteTime",
		res=Flatten@Table[
			var->TimeSeries[Table[{t,var/.Slice[TimeSlice[pd,t],parval]},{t,0,tmax}]]
		,{var,vars}]
	];
	Return[res]
]


InitialParameterSlice::usage="InitialParameterSlice[\!\(\*
StyleBox[\"pd\", \"TI\"]\)] returns the initial parameter slice of ParametricDynamics \!\(\*
StyleBox[\"pd\", \"TI\"]\).";


InitialParameterSlice[pd_ParametricDynamics]:=Sort[pd[[1]]][[1]];


FinalParameterSlice::usage="FinalParameterSlice[\!\(\*
StyleBox[\"pd\", \"TI\"]\)] returns the final parameter slice of ParametricDynamics \!\(\*
StyleBox[\"pd\", \"TI\"]\).";


FinalParameterSlice[pd_ParametricDynamics]:=Sort[pd[[1]]][[-1]];
