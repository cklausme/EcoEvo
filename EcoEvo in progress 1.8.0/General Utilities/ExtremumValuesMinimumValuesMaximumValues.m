(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["ExtremumValues"]
PackageExport["MinimumValues"]
PackageExport["MaximumValues"]


ExtremumValues::usage=
"ExtremumValues[\!\(\*
StyleBox[\"f\", \"TI\"]\), {\!\(\*
StyleBox[\"tmin\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)}] finds local extremum values of temporal rule list \!\(\*
StyleBox[\"f\", \"TI\"]\) between \!\(\*
StyleBox[\"tmin\", \"TI\"]\) and \!\(\*
StyleBox[\"tmax\", \"TI\"]\).
ExtremumValues[\!\(\*
StyleBox[\"f\", \"TI\"]\)] looks over entire domain of \!\(\*
StyleBox[\"f\", \"TI\"]\).
ExtremumValues[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] threads over \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).";


ExtremumValues[x:(_InterpolatingFunction|_TemporalData),opts___?OptionQ]:=Module[{samethreshold},
samethreshold=Evaluate[SameThreshold/.Flatten[{opts,Options[ExtremumValues]}]];

	If[samethreshold!=0,
		Return[Sort[DeleteDuplicates[FindExtrema[x][[All,2]],Abs[#1-#2]<samethreshold&]]],
		Return[Sort[FindExtrema[x][[All,2]]]]
	];
];


ExtremumValues[x:(_InterpolatingFunction|_TemporalData),{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Module[{samethreshold},
samethreshold=Evaluate[SameThreshold/.Flatten[{opts,Options[ExtremumValues]}]];

	If[samethreshold!=0,
		Return[Sort[DeleteDuplicates[FindExtrema[x,{tmin,tmax}][[All,2]],Abs[#1-#2]<samethreshold&]]],
		Return[Sort[FindExtrema[x,{tmin,tmax}][[All,2]]]]
	];
];


(* thread over TemporalRuleLists *)
ExtremumValues[f_?TemporalRuleListQ,opts___?OptionQ]:=f/.(x_->val_):>(x->ExtremumValues[val,opts]);
ExtremumValues[f_?TemporalRuleListQ,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=
	f/.(x_->val_):>(x->ExtremumValues[val,{tmin,tmax},opts]);


(* non-TemporalRuleLists *)
ExtremumValues[f_?RuleListQ]:=f/.(x_->val_):>(x->{val});


(* Lists *)
ExtremumValues[l_List]:=ExtremumValues[TimeSeries[l]];
ExtremumValues[l_List,{tmin_?NumericQ,tmax_?NumericQ}]:=ExtremumValues[TimeSeries[l],{tmin,tmax}];


(* Numeric *)
ExtremumValues[x_?NumericQ]:={x};
ExtremumValues[x_?NumericQ,{tmin_?NumericQ,tmax_?NumericQ}]:={x};


(* thread over ParametricDynamics *)
ExtremumValues[pd_ParametricDynamics,opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[ExtremumValues/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[ExtremumValues/@pd[[1]]]
];

ExtremumValues[pd_ParametricDynamics,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[ExtremumValues/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[ExtremumValues[#,{tmin,tmax}]&/@pd[[1]]]
];


Options[ExtremumValues]={SameThreshold->10^-4};


MinimumValues::usage=
"MinimumValues[\!\(\*
StyleBox[\"f\", \"TI\"]\), {\!\(\*
StyleBox[\"tmin\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)}] finds local minimum values of temporal rule list \!\(\*
StyleBox[\"f\", \"TI\"]\) between \!\(\*
StyleBox[\"tmin\", \"TI\"]\) and \!\(\*
StyleBox[\"tmax\", \"TI\"]\).
MinimumValues[\!\(\*
StyleBox[\"f\", \"TI\"]\)] looks over entire domain of \!\(\*
StyleBox[\"f\", \"TI\"]\).
MinimumValues[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] threads over \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).";


MinimumValues[x:(_InterpolatingFunction|_TemporalData),opts___?OptionQ]:=Module[{samethreshold},
samethreshold=Evaluate[SameThreshold/.Flatten[{opts,Options[MinimumValues]}]];

	If[samethreshold!=0,
		Return[Sort[DeleteDuplicates[FindMinima[x][[All,2]],Abs[#1-#2]<samethreshold&]]],
		Return[Sort[FindMinima[x][[All,2]]]]
	];
];


MinimumValues[x:(_InterpolatingFunction|_TemporalData),{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Module[{samethreshold},
samethreshold=Evaluate[SameThreshold/.Flatten[{opts,Options[MinimumValues]}]];

	If[samethreshold!=0,
		Return[Sort[DeleteDuplicates[FindMinima[x,{tmin,tmax}][[All,2]],Abs[#1-#2]<samethreshold&]]],
		Return[Sort[FindMinima[x,{tmin,tmax}][[All,2]]]]
	];
];


(* thread over RuleLists *)
MinimumValues[f_?TemporalRuleListQ,opts___?OptionQ]:=f/.(x_->val_):>(x->MinimumValues[val,opts]);
MinimumValues[f_?TemporalRuleListQ,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=
	f/.(x_->val_):>(x->MinimumValues[val,{tmin,tmax},opts]);


(* non-TemporalRuleLists *)
MinimumValues[f_?RuleListQ]:=f/.(x_->val_):>(x->{val});


(* Lists *)
MinimumValues[l_List]:=MinimumValues[TimeSeries[l]];
MinimumValues[l_List,{tmin_?NumericQ,tmax_?NumericQ}]:=MinimumValues[TimeSeries[l],{tmin,tmax}];


(* Numeric *)
MinimumValues[x_?NumericQ]:={x};
MinimumValues[x_?NumericQ,{tmin_?NumericQ,tmax_?NumericQ}]:={x};


Options[MinimumValues]={SameThreshold->10^-4};


MaximumValues::usage=
"MaximumValues[\!\(\*
StyleBox[\"f\", \"TI\"]\), {\!\(\*
StyleBox[\"tmin\", \"TI\"]\), \!\(\*
StyleBox[\"tmax\", \"TI\"]\)}] finds local maximum values of temporal rule list \!\(\*
StyleBox[\"f\", \"TI\"]\) between \!\(\*
StyleBox[\"tmin\", \"TI\"]\) and \!\(\*
StyleBox[\"tmax\", \"TI\"]\).
MaximumValues[\!\(\*
StyleBox[\"f\", \"TI\"]\)] looks over entire domain of \!\(\*
StyleBox[\"f\", \"TI\"]\).
MaximumValues[\!\(\*
StyleBox[\"rulelist\", \"TI\"]\)] threads over \!\(\*
StyleBox[\"rulelist\", \"TI\"]\).";


MaximumValues[x:(_InterpolatingFunction|_TemporalData),opts___?OptionQ]:=Module[{samethreshold},
samethreshold=Evaluate[SameThreshold/.Flatten[{opts,Options[MaximumValues]}]];

	If[samethreshold!=0,
		Return[Sort[DeleteDuplicates[FindMaxima[x][[All,2]],Abs[#1-#2]<samethreshold&]]],
		Return[Sort[FindMaxima[x][[All,2]]]]
	];
];


MaximumValues[x:(_InterpolatingFunction|_TemporalData),{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Module[{samethreshold},
samethreshold=Evaluate[SameThreshold/.Flatten[{opts,Options[MaximumValues]}]];

	If[samethreshold!=0,
		Return[Sort[DeleteDuplicates[FindMaxima[x,{tmin,tmax}][[All,2]],Abs[#1-#2]<samethreshold&]]],
		Return[Sort[FindMaxima[x,{tmin,tmax}][[All,2]]]]
	];
];


(* thread over RuleLists *)
MaximumValues[f_?TemporalRuleListQ,opts___?OptionQ]:=f/.(x_->val_):>(x->MaximumValues[val,opts]);
MaximumValues[f_?TemporalRuleListQ,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=
	f/.(x_->val_):>(x->MaximumValues[val,{tmin,tmax},opts]);


(* non-TemporalRuleLists *)
MaximumValues[f_?RuleListQ]:=f/.(x_->val_):>(x->{val});


(* Lists *)
MaximumValues[l_List]:=MaximumValues[TimeSeries[l]];
MaximumValues[l_List,{tmin_?NumericQ,tmax_?NumericQ}]:=MaximumValues[TimeSeries[l],{tmin,tmax}];


(* Numeric *)
MaximumValues[x_?NumericQ]:={x};
MaximumValues[x_?NumericQ,{tmin_?NumericQ,tmax_?NumericQ}]:={x};


(* thread over ParametricDynamicss *)
MaximumValues[pd_ParametricDynamics,opts___?OptionQ]:=If[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[MaximumValues/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[MapAt[MaximumValues,Normal[pd],{All,2}]]
];

MaximumValues[pd_ParametricDynamics,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=If[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[MaximumValues/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[MapAt[MaximumValues[#,{tmin,tmax}]&,Normal[pd],{All,2}]]
];


Options[MaximumValues]={SameThreshold->10^-4};
