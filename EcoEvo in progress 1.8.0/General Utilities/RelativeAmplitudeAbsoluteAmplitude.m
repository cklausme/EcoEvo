(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Package["EcoEvo`"]
PackageExport["RelativeAmplitude"]
PackageExport["AbsoluteAmplitude"]


RelativeAmplitude::usage="RelativeAmplitude[\!\(\*
StyleBox[\"f\", \"TI\"]\)] gives the relative amplitude of temporal rule list \!\(\*
StyleBox[\"f\", \"TI\"]\).";


RelativeAmplitude[in_?TemporalRuleListQ]:=Module[{max,min},
	max=MaximumValue[in];
	min=MinimumValue[in];
	Return[RuleListDivide[RuleListMultiply[RuleListSubtract[max,min],2],RuleListAdd[max,min]]]
];


(* thread over RuleLists *)
RelativeAmplitude[f_?RuleListListQ]:=MapValues[RelativeAmplitude,f];


(* thread over ParametricDynamics *)
RelativeAmplitude[pd_ParametricDynamics,opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[RelativeAmplitude/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[RelativeAmplitude/@pd[[1]]]
];

RelativeAmplitude[pd_ParametricDynamics,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[RelativeAmplitude/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[RelativeAmplitude[#,{tmin,tmax}]&/@pd[[1]]]
];


AbsoluteAmplitude::usage="AbsoluteAmplitude[\!\(\*
StyleBox[\"f\", \"TI\"]\)] gives the absolute amplitude of InterpolatingFunction \!\(\*
StyleBox[\"f\", \"TI\"]\).";


AbsoluteAmplitude[if_InterpolatingFunction]:=Module[{max,min},
	max=Max[MaximumValues[if]];
	min=Min[MinimumValues[if]];
	Return[max-min]
];


(* thread over RuleLists *)
AbsoluteAmplitude[f_?TemporalRuleListQ]:=MapValues[AbsoluteAmplitude,f];


(* thread over ParametricDynamics *)
AbsoluteAmplitude[pd_ParametricDynamics,opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[AbsoluteAmplitude/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[AbsoluteAmplitude/@pd[[1]]]
];

AbsoluteAmplitude[pd_ParametricDynamics,{tmin_?NumericQ,tmax_?NumericQ},opts___?OptionQ]:=Which[
	pd["Type"]=="Discrete",
	Table[var->AssociationToArray[AbsoluteAmplitude/@pd[[1]],var],{var,pd["Variables"]}]
,
	pd["Type"]=="Continuous",
	RuleListInterpolation[AbsoluteAmplitude[#,{tmin,tmax}]&/@pd[[1]]]
];



